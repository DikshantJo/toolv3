# Code Review Configuration
# This file defines the review criteria for different branches

# Global settings
global:
  # Files to exclude from review
  exclude_patterns:
    - "**/*.env*"
    - "**/*.key"
    - "**/*.pem"
    - "**/*.p12"
    - "**/*.pfx"
    - "**/credentials*"
    - "**/secrets*"
    - "**/*.db"
    - "**/*.sqlite"
    - "**/*.sqlite3"
    - "**/database*"
    - "**/db/*"
    - "**/migrations/*"
    - "**/node_modules/**"
    - "**/dist/**"
    - "**/build/**"
    - "**/.git/**"
    # Additional exclusions for sensitive code (uncomment as needed)
    # - "**/config/production*"
    # - "**/private/**"
    # - "**/internal/**"
    # - "**/proprietary/**"
  
  # File types to include in review
  include_extensions:
    - ".js"
    - ".ts"
    - ".jsx"
    - ".tsx"
    - ".py"
    - ".java"
    - ".cs"
    - ".cpp"
    - ".c"
    - ".php"
    - ".rb"
    - ".go"
    - ".rs"
    - ".swift"
    - ".kt"
    - ".scala"
    - ".html"
    - ".css"
    - ".scss"
    - ".less"
    - ".vue"
    - ".svelte"

# Branch-specific configurations
branches:
  development:
    blocking: false  # Allows code to move even if issues found
    severity_threshold: "medium"  # Only create issues for medium+ severity
    review_criteria:
      security:
        - "Check for hardcoded secrets or API keys"
        - "Validate input sanitization"
        - "Check for SQL injection vulnerabilities"
        - "Verify authentication and authorization"
      standards:
        - "Follow consistent naming conventions"
        - "Include proper error handling"
        - "Add meaningful comments for complex logic"
        - "Follow language-specific best practices"
      performance:
        - "Check for potential memory leaks"
        - "Validate database query efficiency"
        - "Review algorithm complexity"
    
  uat:
    blocking: false  # Allows code to move even if issues found
    severity_threshold: "low"  # Create issues for all severity levels
    review_criteria:
      security:
        - "Check for hardcoded secrets or API keys"
        - "Validate input sanitization"
        - "Check for SQL injection vulnerabilities"
        - "Verify authentication and authorization"
        - "Review file upload security"
        - "Check for XSS vulnerabilities"
      standards:
        - "Follow consistent naming conventions"
        - "Include proper error handling"
        - "Add meaningful comments for complex logic"
        - "Follow language-specific best practices"
        - "Ensure proper logging"
        - "Validate configuration management"
      performance:
        - "Check for potential memory leaks"
        - "Validate database query efficiency"
        - "Review algorithm complexity"
        - "Check for unnecessary API calls"
        - "Validate caching strategies"
    
  main:
    blocking: true  # Blocks code movement if critical issues found
    severity_threshold: "low"  # Create issues for all severity levels
    review_criteria:
      security:
        - "Check for hardcoded secrets or API keys"
        - "Validate input sanitization"
        - "Check for SQL injection vulnerabilities"
        - "Verify authentication and authorization"
        - "Review file upload security"
        - "Check for XSS vulnerabilities"
        - "Validate HTTPS usage"
        - "Check for CSRF protection"
        - "Review session management"
        - "Validate data encryption"
      standards:
        - "Follow consistent naming conventions"
        - "Include proper error handling"
        - "Add meaningful comments for complex logic"
        - "Follow language-specific best practices"
        - "Ensure proper logging"
        - "Validate configuration management"
        - "Check for code duplication"
        - "Validate test coverage"
        - "Review documentation completeness"
      performance:
        - "Check for potential memory leaks"
        - "Validate database query efficiency"
        - "Review algorithm complexity"
        - "Check for unnecessary API calls"
        - "Validate caching strategies"
        - "Review resource utilization"
        - "Check for blocking operations"

# Issue labels configuration
issue_labels:
  high:
    name: "security-high"
    color: "d73a4a"
    description: "High severity security or critical issue"
  medium:
    name: "security-medium"
    color: "fbca04"
    description: "Medium severity issue"
  low:
    name: "security-low"
    color: "0e8a16"
    description: "Low severity issue or improvement"

# OpenAI configuration
openai:
  model: "gpt-4"
  max_tokens: 2000
  temperature: 0.1
  system_prompt: |
    You are a senior code reviewer analyzing code changes for security vulnerabilities, 
    coding standards, and performance issues. Provide a detailed analysis with specific 
    recommendations and severity levels (high/medium/low).
    
    IMPORTANT: This code may contain sensitive or proprietary information. 
    Focus only on technical analysis and do not reference specific business logic or 
    sensitive data patterns in your recommendations.
    
    CRITICAL: You MUST respond with ONLY valid JSON in the exact format specified. 
    Do not include any explanatory text before or after the JSON. Start your response 
    directly with the opening brace { and end with the closing brace }.

# Performance configuration
performance:
  concurrency_limit: 3  # Number of files to process simultaneously
  max_file_size: 3000   # Maximum characters to send to OpenAI per file
  batch_size: 3         # Number of files per batch
  timeout_ms: 30000     # Timeout for OpenAI requests (30 seconds)
